An error occurred while executing the following cell:
------------------
# @title Setup and installation { display-mode: "form" }
%%capture
!sudo apt-get install subversion
!svn checkout https://github.com/probml/pyprobml/trunk/vae .
!pip install pytorch-lightning einops umap-learn

try:
    import umap
except ModuleNotFoundError:
    %pip install umap
    import umap
try:
    import torch
except ModuleNotFoundError:
    %pip install torch
    import torch
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from functools import partial
from torch import nn
import torch.nn.functional as F

try:
    from einops import rearrange
except ModuleNotFoundError:
    %pip install einops
    from einops import rearrange
from sklearn.manifold import TSNE

try:
    from torchvision.datasets import MNIST
except ModuleNotFoundError:
    %pip install torchvision
    from torchvision.datasets import MNIST
from torch.utils.data import DataLoader
import torchvision.transforms as transforms

try:
    from pytorch_lightning import Trainer
except ModuleNotFoundError:
    %pip install pytorch_lightning
    from pytorch_lightning import Trainer
try:
    from models.guassian_vae import VAE
except ModuleNotFoundError:
    %pip install models
    from models.guassian_vae import VAE
from models.vanilla_vae import kl_divergence
from models.mmd_vae import MMD

try:
    from experiment import VAEModule, VAE2stageModule
except ModuleNotFoundError:
    %pip install experiment
    from experiment import VAEModule, VAE2stageModule

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")


def get_embedder(encoder, X_data, y_data=None, use_embedder="TSNE"):
    X_data_2D = encoder(X_data)
    if X_data_2D.shape[-1] == 2:
        return X_data_2D
    if use_embedder == "UMAP":
        umap_fn = umap.UMAP()
        X_data_2D = umap_fn.fit_transform(X_data_2D, y_data)
    elif use_embedder == "TSNE":
        tsne = TSNE()
        X_data_2D = tsne.fit_transform(X_data_2D)
    return X_data_2D


def plot_scatter_plot(batch, vae, use_embedder="TSNE", min_distance=0.01):
    """
    Plots scatter plot of embeddings
    """

    def encoder(img):
        return vae.det_encode(img).cpu().detach().numpy()

    model_name = vae.model_name
    X_data, y_data = batch
    X_data = X_data.to(device)
    np.random.seed(42)
    X_data_2D = get_embedder(encoder, X_data, y_data, use_embedder)
    X_data_2D = (X_data_2D - X_data_2D.min()) / (X_data_2D.max() - X_data_2D.min())

    # adapted from https://scikit-learn.org/stable/auto_examples/manifold/plot_lle_digits.html
    fig = plt.figure(figsize=(10, 8))
    cmap = plt.cm.tab10
    plt.scatter(X_data_2D[:, 0], X_data_2D[:, 1], c=y_data, s=10, cmap=cmap)
    image_positions = np.array([[1.0, 1.0]])
    plt.title(f"Latent space of {model_name}")
    for index, position in enumerate(X_data_2D):
        dist = np.sum((position - image_positions) ** 2, axis=1)
        if np.min(dist) > 0.04:  # if far enough from other images
            image_positions = np.r_[image_positions, [position]]
            imagebox = matplotlib.offsetbox.AnnotationBbox(
                matplotlib.offsetbox.OffsetImage(X_data[index].reshape(28, 28).cpu(), cmap="binary"),
                position,
                bboxprops={"edgecolor": tuple(cmap([y_data[index]])[0]), "lw": 2},
            )
            plt.gca().add_artist(imagebox)
    plt.axis("off")
    return fig
------------------


UsageError: Line magic function `%%capture` not found.
